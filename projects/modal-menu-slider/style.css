@import url("https://fonts.googleapis.com/css?family=Lato&display=swap");

/*
This is a PSEUDO-CLASS from CSS use that matches the ROOT element of the whole
webpage structure (the tree that makes the representation of the web)
in HTML it represents the <HTML> itself
THis allow us Declaring Global VARS in the CSS
Kind of like Gods vision of the DOM and setting global VARS of what we need
*/
:root {
    --modal-duration: 1s; /* Since this is a lenght of the animation, this can be change to match your desired value, as used below*/
    --primary-color: #30336b;
    --secondary-color: #be2edd;
}

/*
This is a WILDCARD
It means it will select ALL elements withing the portion of the DOM
Kind of like applying a margin to all elements inside the DOM of

    * {
        margin: 10px;
    }

It can be use on sub-selections like

    p * {
        margin: 10px;
    }
*/
* {
    /*
    SET how to calculate Height and Width of elements
    https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing
    Usual is
        box-sizing: border-box;
        for making the element tightly related to the size of the box
        that contains that same element.
        It takes a 1000px by 1000px a whole element, in case you add
        100px of padding, it will take from that 1000x1000 and not
        adding more.
    */
    box-sizing: border-box;
}

body {
    font-family: "Lato", sans-serif;
    margin: 0;
    transition: transform 0.3s ease;
}

body.show-nav {
    /*
    TranslateX should be use but this one works too
    WIDTH of the NAV
    This is bind to nav {... width:200px because they should use same width}
    */
    transform: translate(200px);
}

nav {
    background-color: var(--primary-color);
    border-right: 2px solid rgba(200, 200, 200, 0.1);
    color: #fff;
    position: fixed;
    top: 0;
    left: 0;
    width: 200px;
    height: 100vh;
    z-index: 100;
    transform: translateX(-100%); /*In order to view this comment this line*/
}

nav logo {
    padding: 30px 0;
    text-align: center;
}

nav .logo img {
    height: 75px;
    width: 75px;
    border-radius: 50%;
}

nav ul {
    padding: 0;
    list-style-type: none;
    margin: 0;
}

nav ul li {
    border-bottom: 2px solid rgba(200, 200, 200, 0.1);
    padding: 20px;
}

/*
    This Abcd:first-of-type is a PSEUDO SELECTOR, in this case allow us to select the first elements only to apply a required change or in this case an specific aspect of CSS only to this one
*/
nav ul li:first-of-type {
    border-top: 2px solid rgba(200, 200, 200, 0.1);
}

nav ul li a {
    color: #fff;
    text-decoration: none;
}

/*
    This ABCD:hover is a PSEUDO-CLASS is just that when user interacts with an element with like the mouse or tap we can change the behaviour of that
*/
nav ul li a:hover {
    text-decoration: underline;
}

header {
    background-color: var(--primary-color);
    color: #fff;
    font-size: 130%;
    position: relative;
    padding: 40px 15px;
    text-align: center;
}

header h1 {
    margin: 0;
}

header p {
    margin: 30px 0;
}

/*
    The input[type='submit'] here is a method of setting CSS when
    several inputs are the same, like no specific ID so you can
    specify by the TYPE they are like TYPE=text, type=password
    Examples:
        # HTML side
        <input type="text" name="firstName" />
        <input type="text" name="lastName" />
        # CSS side
        input[type=text] {
            //styling
        }
        input[name=html_name] {
            //styling
        }
    Some recomend that it is better to just apply ID selectors to the HTML tags. IT IS A BEST PRACTICE
*/
button,
input[type="submit"] {
    background-color: var(--secondary-color);
    border: 0;
    border-radius: 5px;
    color: #fff;
    cursor: pointer;
    padding: 8px 12px;
}

button:focus {
    outline: none;
}

.toggle {
    background-color: rgba(0, 0, 0, 0.3);
    position: absolute;
    top: 20px;
    left: 20px;
}

.cta-btn {
    padding: 12px 30px;
    font-size: 20px;
}

.container {
    padding: 15px;
    margin: 0 auto;
    max-width: 100%;
    width: 800px;
}

.modal-container {
    background-color: rgba(0, 0, 0, 0.6);
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}

.modal-container.show-modal {
    display: block;
}

.modal {
    background-color: #fff;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    position: absolute;
    overflow: hidden;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    max-width: 100%;
    width: 400px;
    animation-name: modalopen;
    animation-duration: var(--modal-duration);
}

.modal-header {
    background-color: var(--primary-color);
    color: #fff;
    padding: 15px;
}

.modal-header h3 {
    margin: 0;
    border-bottom: 1px solid #333;
}

.modal-content {
    padding: 20px;
}

.modal-form div {
    margin: 15px 0;
}

.modal-form label {
    display: block;
    margin-bottom: 5px;
}

.modal-form .form-input {
    padding: 8px;
    width: 100%;
}

.close-btn {
    background: transparent;
    font-size: 25px;
    position: absolute;
    top: 0;
    right: 0;
}

@keyframes modalopen {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}
